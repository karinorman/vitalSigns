library(sp)#
library(raster)#
library(spatstat)#
library(maptools)#
library(SDMTools)#
library(rgdal)#
#
## check if center of polygon is in raster extent#
pointrastcheck <- function(pt, rast){#
  ptx <- pt[1]#
  pty <- pt[2]#
  rastcord <- bbox(rast)#
  check <- ptx >= rastcord[1,1] & ptx <= rastcord[1,2] & pty >= rastcord[2,1] & pty <= rastcord[2,2]#
  if (check == TRUE){#
    return(TRUE)#
  }else {#
    return(FALSE)#
  }#
}#
#
## ClassStat is a function from the SDMTools package that calculates the frag stat metrics #
#
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeDiffer <- function(j, i){#
    these.coord <- coordinates(plt[i, ])#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[i]][[j]] <- FUN(new.rast, ...)#
  }#
  spStats <- vector("list", length=nplot)#
  lapply(1:length(d), makeDisc, i)#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')
ls()
plot(sev)
load('~/Dropbox/Yosemite/analysis/spatialData/data/allPlots.Rdata')
ls()
all.plots@data$attributes
all.plots@data
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')
plots
plot(plots)
nplot <- nrow(plots@data)
nplot
d <- seq(10, 1000, by=100)
d
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeDiffer <- function(j, i){#
    browser()#
    these.coord <- coordinates(plt[i, ])#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[i]][[j]] <- FUN(new.rast, ...)#
  }#
  spStats <- vector("list", length=nplot)#
  lapply(1:length(d), makeDisc, i)#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = test.farm, rast =  tanz, #
                     file.name = 'output/tanz_stats.rdata', plot = 'name')
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, i){#
    browser()#
    these.coord <- coordinates(plt[i, ])#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[i]][[j]] <- FUN(new.rast, ...)#
  }#
  spStats <- vector("list", length=nplot)#
  lapply(1:length(d), makeBuffer, i)#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = test.farm, rast =  tanz, #
                     file.name = 'output/tanz_stats.rdata', plot = 'name')
Q
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = test.farm, rast =  tanz, #
                     file.name = 'output/tanz_stats.rdata', plot = 'name')
these.coord <- coordinates(plt[i, ])
Q
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  sev, #
                     file.name = 'output/tanz_stats.rdata', plot = 'name')
i
j
these.coord <- coordinates(plt[i, ])
these.coord
p <- spatstat:::disc(d[j], these.coord)
p
p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))
new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)
new.rast
p
class(sev)
Q
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, i){#
    browser()#
    these.coord <- coordinates(plt[i, ])#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[i]][[j]] <- FUN(new.rast, ...)#
  }#
  spStats <- vector("list", length=nplot)#
  lapply(1:length(d), makeBuffer, i)#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'name')
these.coord <- coordinates(plt[i, ])#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)
new.rast
plot(new.rast)
plot(p)
spStats[[i]][[j]] <- FUN(new.rast, ...)
spStats
FUN
getwd()
setwd("~/Documents/vital_signs")
Q
## ClassStat is a function from the SDMTools package that calculates the frag stat metrics #
#
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, i){#
    these.coord <- coordinates(plt[i, ])#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    spStats[[i]][[j]] <- FUN(new.rast, ...)#
  }#
  spStats <- vector("list", length=nplot)#
  lapply(1:length(d), makeBuffer, i)#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
testlapply
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, i){#
    these.coord <- coordinates(plt[i, ])#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast, ...)#
    return(out)#
  }#
  spStats <- lapply(1:length(d), makeBuffer, i)#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, i){#
    these.coord <- coordinates(plt[i, ])#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast, ...)#
    return(out)#
  }#
  spStats <- lapply(1:length(d), makeBuffer, i)#
  browser()#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.name)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
names(spStats) <- plt@data[,plot]
spStats
FUN
spStats <- lapply(1:length(d), makeBuffer, i)
spStats
i
j
Q
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, i){#
    these.coord <- coordinates(plt[i, ])#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast, ...)#
    return(out)#
  }#
  spStats <- lapply(1:length(d), makeBuffer, i)#
  return(spStats)#
}
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
testlapply
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, these.coord){#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast, ...)#
    return(out)#
  }#
  these.coord <- coordinates(plt[i, ])#
  spStats <- lapply(1:length(d), makeBuffer, these.coord)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
testlapply
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, these.coord){#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast, ...)#
    browser()#
    return(out)#
  }#
  these.coord <- coordinates(plt[i, ])#
  spStats <- lapply(1:length(d), makeBuffer, these.coord)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/data/fires.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  raster(sev), #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
out
out <- FUN(new.rast)
out
FUN
FUN(new.rast)
new.rast
Q
plot(sev)
plot(raster(sev))
sev
raster(sev)
sev <- raster(sev)
sev
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  sev, #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
Q
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  sev, #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
out
new.rast
d
plot(sev)
Q
load('~/Dropbox/Yosemite/analysis/spatialData/config/saved/rasters/allRast.Rdata')
load()
ls()
plot(pyro.rast)
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  pyro.rast, #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
out
plot(new.rast)
new.rast
plot(pyro.rast)
Q
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, these.coord){#
    browser()#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast)#
    return(out)#
  }#
  these.coord <- coordinates(plt[i, ])#
  spStats <- lapply(1:length(d), makeBuffer, these.coord)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/config/saved/rasters/allRast.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
sev <- raster(sev)#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  pyro.rast, #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(plt))
d.disc
p.disc
new.rast <- crop(rast, extent(p.disc))
plot(new.rast)
points(p.disc)
plot(p.disc)
plot(new.rast)
plot(p.disc, add=TRUE)
Q
sev
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT",#
                        sev=sev,## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, these.coord){#
    browser()#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(sev))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast)#
    return(out)#
  }#
  these.coord <- coordinates(plt[i, ])#
  spStats <- lapply(1:length(d), makeBuffer, these.coord)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/config/saved/rasters/allRast.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  pyro.rast, #
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
out
p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(sev))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)
Q
## creates buffers of a given size, calculates frag stat metrics#
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT",#
                        sev=sev,## name of the column to name#
                        ## output with#
                        data.dir,...){ ## directory to save the sata in#
  makeBuffer <- function(j, these.coord){#
    browser()#
    p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(sev))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)#
    out <- FUN(new.rast)#
    return(out)#
  }#
  these.coord <- coordinates(plt[i, ])#
  spStats <- lapply(1:length(d), makeBuffer, these.coord)#
  return(spStats)#
}#
#
load('~/Dropbox/Yosemite/analysis/spatialData/config/saved/rasters/allRast.Rdata')#
load('~/Dropbox/Yosemite/analysis/spatialData/data/plots.Rdata')#
#
d <- seq(10, 1000, by=100)#
nplot <- nrow(plots@data)#
#
testlapply <- lapply(1:nplot, calcSpStats, d = 10, #
                     plt = plots, rast =  pyro.rast, sev=sev,#
                     file.name = 'output/tanz_stats.rdata', plot = 'PLOT')
p.disc <- spatstat:::disc(d[j], these.coord)#
    p.disc <- as(p.disc, 'SpatialPolygons')#
    proj4string(p.disc) <- CRS(proj4string(sev))
new.rast <- crop(rast, extent(p.disc))#
    new.rast <- mask(new.rast, p.disc)
plot(new.rast)
new.rast
Q
pojection(sev)
projection(sev)
projection(pyro.rast)
projection(plots)
calcSpStats <- function(d, ## buffer RADIUS#
                        plt, ## plot data#
                        nplot, ## number of plots#
                        rast, ## raster to calculate stats from#
                        sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir){ ## directory to save the sata in#
  spStats <- vector("list", length=nplot)#
  for(i in 1:nplot){#
    for(j in 1:length(d)){#
      these.coord <- coordinates(plt[i, ])#
      p <- spatstat:::disc(d[j], these.coord)#
      p <- as(p, 'SpatialPolygons')#
      proj4string(p) <- CRS(proj4string(sev.poly))#
      ## masking is more time intensive on larger#
      ## rasters so crop first#
      new.rast <- crop(rast, extent(p))#
      new.rast <- mask(new.rast, p)#
      spStats[[i]][[j]] <- FUN(new.rast)#
    }#
  }#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.path(data.dir, file.name))#
  return(spStats)#
}#
###### example#
d <- seq(from=50, to=250, by=50)#
nplot <- nrow(coordinates(plots))#
#
save.dir <- "saved"#
#
all.class.stats <- calcSpStats(d, plots, nplot,#
                               pyro.rast, sev,#
                               "allClass.Rdata",#
                                data.dir=save.dir)
getwd()
save.dir <- "output"#
#
all.class.stats <- calcSpStats(d, plots, nplot,#
                               pyro.rast, sev,#
                               "allClass.Rdata",#
                                data.dir=save.dir)
all.class.stats[[1]]
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir){ ## directory to save the sata in#
  these.coord <- coordinates(plt[i, ])#
  spStats <- vector("list", length=length(d))#
  for(j in 1:length(d)){#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(sev.poly))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[j]] <- FUN(new.rast)#
  }#
#
  if(giv.names){#
    names(spStats) <- plt@data[,plot]#
  }#
  save(spStats, file=file.path(data.dir, file.name))#
  return(spStats)#
}
###### example#
d <- seq(from=50, to=250, by=50)#
nplot <- nrow(coordinates(plots))#
#
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, nplot,#
                               pyro.rast, sev,#
                               "allClass.Rdata",#
                                data.dir=save.dir)
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, #
                               pyro.rast, sev,#
                               "allClass.Rdata",#
                                data.dir=save.dir)
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        sev.poly, ## spatial file to extract#
                        ## projections from#
                        file.name, ## name of the output file#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        giv.names=TRUE, ## give the output names#
                        plot="PLOT", ## name of the column to name#
                        ## output with#
                        data.dir){ ## directory to save the sata in#
  these.coord <- coordinates(plt[i, ])#
  spStats <- vector("list", length=length(d))#
  for(j in 1:length(d)){#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(sev.poly))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[j]] <- FUN(new.rast)#
  }#
#
  ## if(giv.names){#
  ##   names(spStats) <- plt@data[,plot]#
  ## }#
  ## save(spStats, file=file.path(data.dir, file.name))#
  return(spStats)#
}#
###### example#
d <- seq(from=50, to=250, by=50)#
nplot <- nrow(coordinates(plots))#
#
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, #
                               pyro.rast, sev,#
                               "allClass.Rdata",#
                                data.dir=save.dir)
all.clas.stats[[1]]
all.class.stats[[1]]
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## projections from#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        plot="PLOT"){#
  these.coord <- coordinates(plt[i, ])#
  spStats <- vector("list", length=length(d))#
  for(j in 1:length(d)){#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(these.coord))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[j]] <- FUN(new.rast)#
  }#
  names(spStats) <- d#
  return(spStats)#
}#
###### example#
d <- seq(from=50, to=250, by=50)#
nplot <- nrow(coordinates(plots))#
#
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, #
                               pyro.rast, sev,#
                               "allClass.Rdata",#
                                data.dir=save.dir)
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, #
                               pyro.rast))
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, #
                               pyro.rast)
calcSpStats <- function(i,#
                        d, ## buffer RADIUS#
                        plt, ## plot data#
                        rast, ## raster to calculate stats from#
                        ## projections from#
                        FUN=ClassStat, ## function for calculating#
                        ## stats on buffers#
                        plot="PLOT"){#
  these.coord <- coordinates(plt[i, ])#
  spStats <- vector("list", length=length(d))#
  for(j in 1:length(d)){#
    p <- spatstat:::disc(d[j], these.coord)#
    p <- as(p, 'SpatialPolygons')#
    proj4string(p) <- CRS(proj4string(plt))#
    ## masking is more time intensive on larger#
    ## rasters so crop first#
    new.rast <- crop(rast, extent(p))#
    new.rast <- mask(new.rast, p)#
    spStats[[j]] <- FUN(new.rast)#
  }#
  names(spStats) <- d#
  return(spStats)#
}#
###### example#
d <- seq(from=50, to=250, by=50)#
nplot <- nrow(coordinates(plots))#
#
save.dir <- "output"#
all.class.stats <- lapply(1:nplot, calcSpStats, d, plots, #
                               pyro.rast)
all.class.stats
plots@data
plots@data$PLOT
names(all.class.stas) <- plots@data$PLOT
names(all.class.stats) <- plots@data$PLOT
all.class.stats$L33
all.class.stats$L33$'10'
ClassStat
tanz <- readGDAL("Land_cover.Tanzania/tz_tm1-57palglobdem_landcover.dat") #
tanz <- raster(tanz)
